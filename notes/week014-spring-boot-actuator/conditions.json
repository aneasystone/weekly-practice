{
  "contexts": {
    "application": {
      "positiveMatches": {
        "AuditEventsEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "BeansEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "BeansEndpointAutoConfiguration#beansEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.beans.BeansEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "CachesEndpointAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.cache.CacheManager'"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "CachesEndpointAutoConfiguration#cachesEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "CachesEndpointAutoConfiguration#cachesEndpointWebExtension": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.cache.CachesEndpoint; SearchStrategy: all) found bean 'cachesEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.cache.CachesEndpointWebExtension; SearchStrategy: all) did not find any beans"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "ConditionsReportEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "ConditionsReportEndpointAutoConfiguration#conditionsReportEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.autoconfigure.condition.ConditionsReportEndpoint; SearchStrategy: current) did not find any beans"
          }
        ],
        "ShutdownEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "ShutdownEndpointAutoConfiguration#shutdownEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.ShutdownEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "ConfigurationPropertiesReportEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "ConfigurationPropertiesReportEndpointAutoConfiguration#configurationPropertiesReportEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "ConfigurationPropertiesReportEndpointAutoConfiguration#configurationPropertiesReportEndpointWebExtension": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpoint; SearchStrategy: all) found bean 'configurationPropertiesReportEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.context.properties.ConfigurationPropertiesReportEndpointWebExtension; SearchStrategy: all) did not find any beans"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "EndpointAutoConfiguration#endpointCachingOperationInvokerAdvisor": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor; SearchStrategy: all) did not find any beans"
          }
        ],
        "EndpointAutoConfiguration#endpointOperationParameterMapper": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.invoke.ParameterValueMapper; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmxEndpointAutoConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.jmx.enabled=true) matched"
          }
        ],
        "JmxEndpointAutoConfiguration#endpointObjectNameFactory": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.jmx.EndpointObjectNameFactory; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmxEndpointAutoConfiguration#jmxAnnotationEndpointDiscoverer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.jmx.JmxEndpointsSupplier; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmxEndpointAutoConfiguration#jmxMBeanExporter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnSingleCandidate (types: javax.management.MBeanServer; SearchStrategy: all) found a single bean 'mbeanServer'"
          }
        ],
        "ServletEndpointManagementContextConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "ServletEndpointManagementContextConfiguration.WebMvcServletEndpointManagementContextConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
          }
        ],
        "WebEndpointAutoConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "@ConditionalOnWebApplication (required) found 'session' scope"
          }
        ],
        "WebEndpointAutoConfiguration#controllerEndpointDiscoverer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ControllerEndpointsSupplier; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebEndpointAutoConfiguration#endpointMediaTypes": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebEndpointAutoConfiguration#pathMappedEndpoints": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.PathMappedEndpoints; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebEndpointAutoConfiguration#webEndpointDiscoverer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebEndpointAutoConfiguration.WebEndpointServletConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "WebEndpointAutoConfiguration.WebEndpointServletConfiguration#servletEndpointDiscoverer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.annotation.ServletEndpointsSupplier; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcEndpointManagementContextConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet,org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier; SearchStrategy: all) found beans 'webEndpointDiscoverer', 'dispatcherServlet'"
          }
        ],
        "WebMvcEndpointManagementContextConfiguration#controllerEndpointHandlerMapping": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.ControllerEndpointHandlerMapping; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcEndpointManagementContextConfiguration#webEndpointServletHandlerMapping": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.endpoint.web.servlet.WebMvcEndpointHandlerMapping; SearchStrategy: all) did not find any beans"
          }
        ],
        "EnvironmentEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "EnvironmentEndpointAutoConfiguration#environmentEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "EnvironmentEndpointAutoConfiguration#environmentEndpointWebExtension": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.env.EnvironmentEndpoint; SearchStrategy: all) found bean 'environmentEndpoint'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.env.EnvironmentEndpointWebExtension; SearchStrategy: all) did not find any beans"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          }
        ],
        "HealthContributorAutoConfiguration#pingHealthContributor": [
          {
            "condition": "OnEnabledHealthIndicatorCondition",
            "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
          }
        ],
        "HealthEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "HealthEndpointConfiguration#healthContributorRegistry": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthContributorRegistry; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointConfiguration#healthEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointConfiguration#healthEndpointGroups": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpointGroups; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointConfiguration#healthHttpCodeStatusMapper": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HttpCodeStatusMapper; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointConfiguration#healthStatusAggregator": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.StatusAggregator; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointWebExtensionConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.health.HealthEndpoint; SearchStrategy: all) found bean 'healthEndpoint'"
          }
        ],
        "HealthEndpointWebExtensionConfiguration#healthEndpointWebExtension": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.health.HealthEndpointWebExtension; SearchStrategy: all) did not find any beans"
          }
        ],
        "HealthEndpointWebExtensionConfiguration.MvcAdditionalHealthEndpointPathsConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.web.exposure' property"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'"
          }
        ],
        "InfoContributorAutoConfiguration#buildInfoContributor": [
          {
            "condition": "OnEnabledInfoContributorCondition",
            "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnSingleCandidate (types: org.springframework.boot.info.BuildProperties; SearchStrategy: all) found a single bean 'buildProperties'"
          }
        ],
        "InfoContributorAutoConfiguration#envInfoContributor": [
          {
            "condition": "OnEnabledInfoContributorCondition",
            "message": "@ConditionalOnEnabledInfoContributor management.info.env.enabled is true"
          }
        ],
        "InfoContributorAutoConfiguration#gitInfoContributor": [
          {
            "condition": "OnEnabledInfoContributorCondition",
            "message": "@ConditionalOnEnabledInfoContributor management.info.defaults.enabled is considered true"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnSingleCandidate (types: org.springframework.boot.info.GitProperties; SearchStrategy: all) found a single bean 'gitProperties'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.info.GitInfoContributor; SearchStrategy: all) did not find any beans"
          }
        ],
        "InfoContributorAutoConfiguration#javaInfoContributor": [
          {
            "condition": "OnEnabledInfoContributorCondition",
            "message": "@ConditionalOnEnabledInfoContributor management.info.java.enabled is true"
          }
        ],
        "InfoContributorAutoConfiguration#osInfoContributor": [
          {
            "condition": "OnEnabledInfoContributorCondition",
            "message": "@ConditionalOnEnabledInfoContributor management.info.os.enabled is true"
          }
        ],
        "InfoEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "InfoEndpointAutoConfiguration#infoEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.info.InfoEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "LogFileWebEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "LoggersEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "LoggersEndpointAutoConfiguration#loggersEndpoint": [
          {
            "condition": "LoggersEndpointAutoConfiguration.OnEnabledLoggingSystemCondition",
            "message": "Logging System enabled"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.logging.LoggingSystem; SearchStrategy: all) found bean 'springBootLoggingSystem'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.logging.LoggersEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "HeapDumpWebEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "HeapDumpWebEndpointAutoConfiguration#heapDumpWebEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.HeapDumpWebEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "ThreadDumpEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "ThreadDumpEndpointAutoConfiguration#dumpEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.management.ThreadDumpEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "CompositeMeterRegistryAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.composite.CompositeMeterRegistry'"
          }
        ],
        "JvmMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'prometheusMeterRegistry'"
          }
        ],
        "JvmMetricsAutoConfiguration#classLoaderMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.ClassLoaderMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "JvmMetricsAutoConfiguration#jvmGcMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmGcMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "JvmMetricsAutoConfiguration#jvmHeapPressureMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmHeapPressureMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "JvmMetricsAutoConfiguration#jvmMemoryMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmMemoryMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "JvmMetricsAutoConfiguration#jvmThreadMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.jvm.JvmThreadMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "LogbackMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'io.micrometer.core.instrument.MeterRegistry', 'ch.qos.logback.classic.LoggerContext', 'org.slf4j.LoggerFactory'"
          },
          {
            "condition": "LogbackMetricsAutoConfiguration.LogbackLoggingCondition",
            "message": "LogbackLoggingCondition ILoggerFactory is a Logback LoggerContext"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'prometheusMeterRegistry'"
          }
        ],
        "LogbackMetricsAutoConfiguration#logbackMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.logging.LogbackMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "MetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed'"
          }
        ],
        "MetricsAutoConfiguration#micrometerClock": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) did not find any beans"
          }
        ],
        "MetricsEndpointAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.annotation.Timed'"
          },
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "MetricsEndpointAutoConfiguration#metricsEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'prometheusMeterRegistry'; @ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.MetricsEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "SystemMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'prometheusMeterRegistry'"
          }
        ],
        "SystemMetricsAutoConfiguration#diskSpaceMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.system.DiskSpaceMetricsBinder; SearchStrategy: all) did not find any beans"
          }
        ],
        "SystemMetricsAutoConfiguration#fileDescriptorMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.FileDescriptorMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "SystemMetricsAutoConfiguration#processorMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.ProcessorMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "SystemMetricsAutoConfiguration#uptimeMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.system.UptimeMetrics; SearchStrategy: all) did not find any beans"
          }
        ],
        "CacheMeterBinderProvidersConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.MeterBinder'"
          }
        ],
        "PrometheusMetricsExportAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.prometheus.PrometheusMeterRegistry'"
          },
          {
            "condition": "OnMetricsExportEnabledCondition",
            "message": "@ConditionalOnEnabledMetricsExport management.metrics.export.defaults.enabled is considered true"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.Clock; SearchStrategy: all) found bean 'micrometerClock'"
          }
        ],
        "PrometheusMetricsExportAutoConfiguration#collectorRegistry": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.prometheus.client.CollectorRegistry; SearchStrategy: all) did not find any beans"
          }
        ],
        "PrometheusMetricsExportAutoConfiguration#prometheusConfig": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.prometheus.PrometheusConfig; SearchStrategy: all) did not find any beans"
          }
        ],
        "PrometheusMetricsExportAutoConfiguration#prometheusMeterRegistry": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: io.micrometer.prometheus.PrometheusMeterRegistry; SearchStrategy: all) did not find any beans"
          }
        ],
        "PrometheusMetricsExportAutoConfiguration.PrometheusScrapeEndpointConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "PrometheusMetricsExportAutoConfiguration.PrometheusScrapeEndpointConfiguration#prometheusEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.export.prometheus.PrometheusScrapeEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "StartupTimeMetricsListenerAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'prometheusMeterRegistry'"
          }
        ],
        "StartupTimeMetricsListenerAutoConfiguration#startupTimeMetrics": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.startup.StartupTimeMetricsListener; SearchStrategy: all) did not find any beans"
          }
        ],
        "TaskExecutorMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.binder.jvm.ExecutorServiceMetrics'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: java.util.concurrent.Executor,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans 'prometheusMeterRegistry', 'applicationTaskExecutor'"
          }
        ],
        "HttpClientMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'io.micrometer.core.instrument.MeterRegistry'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'prometheusMeterRegistry'"
          }
        ],
        "RestTemplateMetricsConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) found bean 'restTemplateBuilder'"
          }
        ],
        "RestTemplateMetricsConfiguration#restTemplateExchangeTagsProvider": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.web.client.RestTemplateExchangeTagsProvider; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'prometheusMeterRegistry'"
          }
        ],
        "WebMvcMetricsAutoConfiguration#webMvcMetricsFilter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcMetricsAutoConfiguration#webMvcTagsProvider": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.metrics.web.servlet.WebMvcTagsProvider; SearchStrategy: all) did not find any beans"
          }
        ],
        "TomcatMetricsAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'io.micrometer.core.instrument.binder.tomcat.TomcatMetrics', 'org.apache.catalina.Manager'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "@ConditionalOnWebApplication (required) found 'session' scope"
          }
        ],
        "TomcatMetricsAutoConfiguration#tomcatMetricsBinder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found bean 'prometheusMeterRegistry'; @ConditionalOnMissingBean (types: io.micrometer.core.instrument.binder.tomcat.TomcatMetrics,org.springframework.boot.actuate.metrics.web.tomcat.TomcatMetricsBinder; SearchStrategy: all) did not find any beans"
          }
        ],
        "ScheduledTasksEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "ScheduledTasksEndpointAutoConfiguration#scheduledTasksEndpoint": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.actuate.scheduling.ScheduledTasksEndpoint; SearchStrategy: all) did not find any beans"
          }
        ],
        "DiskSpaceHealthContributorAutoConfiguration": [
          {
            "condition": "OnEnabledHealthIndicatorCondition",
            "message": "@ConditionalOnEnabledHealthIndicator management.health.defaults.enabled is considered true"
          }
        ],
        "DiskSpaceHealthContributorAutoConfiguration#diskSpaceHealthIndicator": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: diskSpaceHealthIndicator; SearchStrategy: all) did not find any beans"
          }
        ],
        "HttpTraceEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "MappingsEndpointAutoConfiguration": [
          {
            "condition": "OnAvailableEndpointCondition",
            "message": "@ConditionalOnAvailableEndpoint marked as exposed by a 'management.endpoints.jmx.exposure' property"
          }
        ],
        "MappingsEndpointAutoConfiguration.ServletWebConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "MappingsEndpointAutoConfiguration.ServletWebConfiguration.SpringMvcConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'"
          }
        ],
        "ManagementContextAutoConfiguration.SameManagementContextConfiguration": [
          {
            "condition": "OnManagementPortCondition",
            "message": "Management Port actual port type (SAME) matched required type"
          }
        ],
        "ServletManagementContextAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'javax.servlet.Servlet'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "SpringApplicationAdminJmxAutoConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.application.admin.enabled=true) matched"
          }
        ],
        "SpringApplicationAdminJmxAutoConfiguration#springApplicationAdminRegistrar": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar; SearchStrategy: all) did not find any beans"
          }
        ],
        "AopAutoConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.aop.auto=true) matched"
          }
        ],
        "AopAutoConfiguration.ClassProxyingConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnMissingClass did not find unwanted class 'org.aspectj.weaver.Advice'"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.aop.proxy-target-class=true) matched"
          }
        ],
        "GenericCacheConfiguration": [
          {
            "condition": "CacheCondition",
            "message": "Cache org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration automatic cache type"
          }
        ],
        "NoOpCacheConfiguration": [
          {
            "condition": "CacheCondition",
            "message": "Cache org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration automatic cache type"
          }
        ],
        "SimpleCacheConfiguration": [
          {
            "condition": "CacheCondition",
            "message": "Cache org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration automatic cache type"
          }
        ],
        "LifecycleAutoConfiguration#defaultLifecycleProcessor": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: lifecycleProcessor; SearchStrategy: current) did not find any beans"
          }
        ],
        "PropertyPlaceholderAutoConfiguration#propertySourcesPlaceholderConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.context.support.PropertySourcesPlaceholderConfigurer; SearchStrategy: current) did not find any beans"
          }
        ],
        "HttpMessageConvertersAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.HttpMessageConverter'"
          },
          {
            "condition": "HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition",
            "message": "NoneNestedConditions 0 matched 1 did not; NestedCondition on HttpMessageConvertersAutoConfiguration.NotReactiveWebApplicationCondition.ReactiveWebApplication did not find reactive web application classes"
          }
        ],
        "HttpMessageConvertersAutoConfiguration#messageConverters": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.http.HttpMessageConverters; SearchStrategy: all) did not find any beans"
          }
        ],
        "HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.StringHttpMessageConverter'"
          }
        ],
        "HttpMessageConvertersAutoConfiguration.StringHttpMessageConverterConfiguration#stringHttpMessageConverter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.StringHttpMessageConverter; SearchStrategy: all) did not find any beans"
          }
        ],
        "JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.mvc.converters.preferred-json-mapper=jackson) matched"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) found bean 'jacksonObjectMapper'"
          }
        ],
        "JacksonHttpMessageConvertersConfiguration.MappingJackson2HttpMessageConverterConfiguration#mappingJackson2HttpMessageConverter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.json.MappingJackson2HttpMessageConverter ignored: org.springframework.hateoas.server.mvc.TypeConstrainedMappingJackson2HttpMessageConverter,org.springframework.data.rest.webmvc.alps.AlpsJsonHttpMessageConverter; SearchStrategy: all) did not find any beans"
          }
        ],
        "ProjectInfoAutoConfiguration#buildProperties": [
          {
            "condition": "OnResourceCondition",
            "message": "@ConditionalOnResource found location ${spring.info.build.location:classpath:META-INF/build-info.properties}"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.info.BuildProperties; SearchStrategy: all) did not find any beans"
          }
        ],
        "ProjectInfoAutoConfiguration#gitProperties": [
          {
            "condition": "ProjectInfoAutoConfiguration.GitResourceAvailableCondition",
            "message": "GitResource found git info at classpath:git.properties"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.info.GitProperties; SearchStrategy: all) did not find any beans"
          }
        ],
        "JacksonAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.databind.ObjectMapper'"
          }
        ],
        "JacksonAutoConfiguration.Jackson2ObjectMapperBuilderCustomizerConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
          }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
          }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperBuilderConfiguration#jacksonObjectMapperBuilder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; SearchStrategy: all) did not find any beans"
          }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.http.converter.json.Jackson2ObjectMapperBuilder'"
          }
        ],
        "JacksonAutoConfiguration.JacksonObjectMapperConfiguration#jacksonObjectMapper": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: com.fasterxml.jackson.databind.ObjectMapper; SearchStrategy: all) did not find any beans"
          }
        ],
        "JacksonAutoConfiguration.ParameterNamesModuleConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'com.fasterxml.jackson.module.paramnames.ParameterNamesModule'"
          }
        ],
        "JacksonAutoConfiguration.ParameterNamesModuleConfiguration#parameterNamesModule": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: com.fasterxml.jackson.module.paramnames.ParameterNamesModule; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmxAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.jmx.export.MBeanExporter'"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.jmx.enabled=true) matched"
          }
        ],
        "JmxAutoConfiguration#mbeanExporter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.jmx.export.MBeanExporter; SearchStrategy: current) did not find any beans"
          }
        ],
        "JmxAutoConfiguration#mbeanServer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: javax.management.MBeanServer; SearchStrategy: all) did not find any beans"
          }
        ],
        "JmxAutoConfiguration#objectNamingStrategy": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.jmx.export.naming.ObjectNamingStrategy; SearchStrategy: current) did not find any beans"
          }
        ],
        "SqlInitializationAutoConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.sql.init.enabled) matched"
          },
          {
            "condition": "SqlInitializationAutoConfiguration.SqlInitializationModeCondition",
            "message": "NoneNestedConditions 0 matched 1 did not; NestedCondition on SqlInitializationAutoConfiguration.SqlInitializationModeCondition.ModeIsNever @ConditionalOnProperty (spring.sql.init.mode=never) did not find property 'mode'"
          }
        ],
        "TaskExecutionAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor'"
          }
        ],
        "TaskExecutionAutoConfiguration#applicationTaskExecutor": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: java.util.concurrent.Executor; SearchStrategy: all) did not find any beans"
          }
        ],
        "TaskExecutionAutoConfiguration#taskExecutorBuilder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.TaskExecutorBuilder; SearchStrategy: all) did not find any beans"
          }
        ],
        "TaskSchedulingAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler'"
          }
        ],
        "TaskSchedulingAutoConfiguration#taskSchedulerBuilder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.task.TaskSchedulerBuilder; SearchStrategy: all) did not find any beans"
          }
        ],
        "RestTemplateAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.client.RestTemplate'"
          },
          {
            "condition": "RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition",
            "message": "NoneNestedConditions 0 matched 1 did not; NestedCondition on RestTemplateAutoConfiguration.NotReactiveWebApplicationCondition.ReactiveWebApplication did not find reactive web application classes"
          }
        ],
        "RestTemplateAutoConfiguration#restTemplateBuilder": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.client.RestTemplateBuilder; SearchStrategy: all) did not find any beans"
          }
        ],
        "RestTemplateAutoConfiguration#restTemplateBuilderConfigurer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.client.RestTemplateBuilderConfigurer; SearchStrategy: all) did not find any beans"
          }
        ],
        "EmbeddedWebServerFactoryCustomizerAutoConfiguration": [
          {
            "condition": "OnWebApplicationCondition",
            "message": "@ConditionalOnWebApplication (required) found 'session' scope"
          }
        ],
        "EmbeddedWebServerFactoryCustomizerAutoConfiguration.TomcatWebServerFactoryCustomizerConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol'"
          }
        ],
        "DispatcherServletAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "DispatcherServletAutoConfiguration.DispatcherServletConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'javax.servlet.ServletRegistration'"
          },
          {
            "condition": "DispatcherServletAutoConfiguration.DefaultDispatcherServletCondition",
            "message": "Default DispatcherServlet did not find dispatcher servlet beans"
          }
        ],
        "DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'javax.servlet.ServletRegistration'"
          },
          {
            "condition": "DispatcherServletAutoConfiguration.DispatcherServletRegistrationCondition",
            "message": "DispatcherServlet Registration did not find servlet registration bean"
          }
        ],
        "DispatcherServletAutoConfiguration.DispatcherServletRegistrationConfiguration#dispatcherServletRegistration": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (names: dispatcherServlet types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'"
          }
        ],
        "HttpEncodingAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.springframework.web.filter.CharacterEncodingFilter'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (server.servlet.encoding.enabled) matched"
          }
        ],
        "HttpEncodingAutoConfiguration#characterEncodingFilter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.CharacterEncodingFilter; SearchStrategy: all) did not find any beans"
          }
        ],
        "MultipartAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.multipart.support.StandardServletMultipartResolver', 'javax.servlet.MultipartConfigElement'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.servlet.multipart.enabled) matched"
          }
        ],
        "MultipartAutoConfiguration#multipartConfigElement": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: javax.servlet.MultipartConfigElement,org.springframework.web.multipart.commons.CommonsMultipartResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "MultipartAutoConfiguration#multipartResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "ServletWebServerFactoryAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'javax.servlet.ServletRequest'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "ServletWebServerFactoryAutoConfiguration#tomcatServletWebServerFactoryCustomizer": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required class 'org.apache.catalina.startup.Tomcat'"
          }
        ],
        "ServletWebServerFactoryConfiguration.EmbeddedTomcat": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.apache.catalina.startup.Tomcat', 'org.apache.coyote.UpgradeProtocol'"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.server.ServletWebServerFactory; SearchStrategy: current) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet', 'org.springframework.web.servlet.config.annotation.WebMvcConfigurer'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration#formContentFilter": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (spring.mvc.formcontent.filter.enabled) matched"
          },
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.filter.FormContentFilter; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.EnableWebMvcConfiguration#flashMapManager": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: flashMapManager; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.EnableWebMvcConfiguration#localeResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: localeResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.EnableWebMvcConfiguration#themeResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: themeResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#defaultViewResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.InternalResourceViewResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#requestContextFilter": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.context.request.RequestContextListener,org.springframework.web.filter.RequestContextFilter; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#viewResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.web.servlet.ViewResolver; SearchStrategy: all) found beans 'defaultViewResolver', 'beanNameViewResolver', 'mvcViewResolver'; @ConditionalOnMissingBean (names: viewResolver types: org.springframework.web.servlet.view.ContentNegotiatingViewResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "ErrorMvcAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'org.springframework.web.servlet.DispatcherServlet'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "ErrorMvcAutoConfiguration#basicErrorController": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorController; SearchStrategy: current) did not find any beans"
          }
        ],
        "ErrorMvcAutoConfiguration#errorAttributes": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.boot.web.servlet.error.ErrorAttributes; SearchStrategy: current) did not find any beans"
          }
        ],
        "ErrorMvcAutoConfiguration.DefaultErrorViewResolverConfiguration#conventionErrorViewResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnBean (types: org.springframework.web.servlet.DispatcherServlet; SearchStrategy: all) found bean 'dispatcherServlet'; @ConditionalOnMissingBean (types: org.springframework.boot.autoconfigure.web.servlet.error.ErrorViewResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration": [
          {
            "condition": "OnPropertyCondition",
            "message": "@ConditionalOnProperty (server.error.whitelabel.enabled) matched"
          },
          {
            "condition": "ErrorMvcAutoConfiguration.ErrorTemplateMissingCondition",
            "message": "ErrorTemplate Missing did not find error template view"
          }
        ],
        "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#beanNameViewResolver": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) did not find any beans"
          }
        ],
        "ErrorMvcAutoConfiguration.WhitelabelErrorViewConfiguration#defaultErrorView": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: error; SearchStrategy: all) did not find any beans"
          }
        ],
        "WebSocketServletAutoConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'javax.servlet.Servlet', 'javax.websocket.server.ServerContainer'"
          },
          {
            "condition": "OnWebApplicationCondition",
            "message": "found 'session' scope"
          }
        ],
        "WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration": [
          {
            "condition": "OnClassCondition",
            "message": "@ConditionalOnClass found required classes 'org.apache.catalina.startup.Tomcat', 'org.apache.tomcat.websocket.server.WsSci'"
          }
        ],
        "WebSocketServletAutoConfiguration.TomcatWebSocketConfiguration#websocketServletWebServerCustomizer": [
          {
            "condition": "OnBeanCondition",
            "message": "@ConditionalOnMissingBean (names: websocketServletWebServerCustomizer; SearchStrategy: all) did not find any beans"
          }
        ]
      },
      "negativeMatches": {
        "RabbitHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.amqp.rabbit.core.RabbitTemplate'"
            }
          ],
          "matched": []
        },
        "AuditAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) did not find any beans of type org.springframework.boot.actuate.audit.AuditEventRepository"
            }
          ],
          "matched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.auditevents.enabled) matched"
            }
          ]
        },
        "AuditEventsEndpointAutoConfiguration#auditEventsEndpoint": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.audit.AuditEventRepository; SearchStrategy: all) did not find any beans of type org.springframework.boot.actuate.audit.AuditEventRepository"
            }
          ],
          "matched": []
        },
        "AvailabilityHealthContributorAutoConfiguration#livenessStateHealthIndicator": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.health.livenessstate.enabled=true) did not find property 'enabled'"
            }
          ],
          "matched": []
        },
        "AvailabilityHealthContributorAutoConfiguration#readinessStateHealthIndicator": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.health.readinessstate.enabled=true) did not find property 'enabled'"
            }
          ],
          "matched": []
        },
        "AvailabilityProbesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "AvailabilityProbesAutoConfiguration.ProbesCondition",
              "message": "Probes availability not running on a supported cloud platform"
            }
          ],
          "matched": []
        },
        "CassandraHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "CassandraReactiveHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "ReactiveCloudFoundryActuatorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication did not find reactive web application classes"
            }
          ],
          "matched": []
        },
        "CloudFoundryActuatorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnCloudPlatformCondition",
              "message": "@ConditionalOnCloudPlatform did not find CLOUD_FOUNDRY"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.web.servlet.DispatcherServlet'"
            },
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.cloudfoundry.enabled) matched"
            }
          ]
        },
        "CouchbaseHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "CouchbaseReactiveHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "ElasticSearchReactiveHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'reactor.core.publisher.Flux'"
            }
          ],
          "matched": []
        },
        "ElasticSearchRestHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClient'"
            }
          ],
          "matched": []
        },
        "ServletEndpointManagementContextConfiguration.JerseyServletEndpointManagementContextConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
            }
          ],
          "matched": []
        },
        "JerseyWebEndpointManagementContextConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
            }
          ],
          "matched": []
        },
        "WebFluxEndpointManagementContextConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler'"
            }
          ],
          "matched": []
        },
        "WebMvcEndpointManagementContextConfiguration#managementHealthEndpointWebMvcHandlerMapping": {
          "notMatched": [
            {
              "condition": "OnManagementPortCondition",
              "message": "Management Port actual port type (SAME) did not match required type (DIFFERENT)"
            }
          ],
          "matched": []
        },
        "FlywayEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'"
            }
          ],
          "matched": []
        },
        "HazelcastHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
            }
          ],
          "matched": []
        },
        "HealthEndpointReactiveWebExtensionConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "did not find reactive web application classes"
            }
          ],
          "matched": []
        },
        "HealthEndpointWebExtensionConfiguration.JerseyAdditionalHealthEndpointPathsConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
            }
          ],
          "matched": []
        },
        "ReactiveHealthEndpointConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'reactor.core.publisher.Flux'"
            }
          ],
          "matched": []
        },
        "InfluxDbHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.influxdb.InfluxDB'"
            }
          ],
          "matched": []
        },
        "IntegrationGraphEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.integration.graph.IntegrationGraphServer'"
            }
          ],
          "matched": []
        },
        "DataSourceHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate'"
            }
          ],
          "matched": []
        },
        "JmsHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory'"
            }
          ],
          "matched": []
        },
        "JolokiaEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.jolokia.http.AgentServlet'"
            }
          ],
          "matched": []
        },
        "LdapHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.ldap.core.LdapOperations'"
            }
          ],
          "matched": []
        },
        "LiquibaseEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'liquibase.integration.spring.SpringLiquibase'"
            }
          ],
          "matched": []
        },
        "LogFileWebEndpointAutoConfiguration#logFileWebEndpoint": {
          "notMatched": [
            {
              "condition": "LogFileWebEndpointAutoConfiguration.LogFileCondition",
              "message": "Log File did not find logging file"
            }
          ],
          "matched": []
        },
        "MailHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.mail.javamail.JavaMailSenderImpl'"
            }
          ],
          "matched": []
        },
        "CompositeMeterRegistryConfiguration": {
          "notMatched": [
            {
              "condition": "CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition",
              "message": "NoneNestedConditions 1 matched 1 did not; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.SingleInjectableMeterRegistry @ConditionalOnSingleCandidate (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found a single bean 'prometheusMeterRegistry'; NestedCondition on CompositeMeterRegistryConfiguration.MultipleNonPrimaryMeterRegistriesCondition.NoMeterRegistryCondition @ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' prometheusMeterRegistry"
            }
          ],
          "matched": []
        },
        "KafkaMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.kafka.core.ProducerFactory'"
            }
          ],
          "matched": []
        },
        "Log4J2MetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.apache.logging.log4j.core.LoggerContext'"
            }
          ],
          "matched": []
        },
        "NoOpMeterRegistryConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' prometheusMeterRegistry"
            }
          ],
          "matched": []
        },
        "RabbitMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.rabbitmq.client.ConnectionFactory'"
            }
          ],
          "matched": []
        },
        "CacheMeterBinderProvidersConfiguration.Cache2kCacheMeterBinderProviderConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.cache2k.Cache2kBuilder', 'org.cache2k.extra.spring.SpringCache2kCache', 'org.cache2k.extra.micrometer.Cache2kCacheMetrics'"
            }
          ],
          "matched": []
        },
        "CacheMeterBinderProvidersConfiguration.CaffeineCacheMeterBinderProviderConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.springframework.cache.caffeine.CaffeineCache', 'com.github.benmanes.caffeine.cache.Cache'"
            }
          ],
          "matched": []
        },
        "CacheMeterBinderProvidersConfiguration.EhCache2CacheMeterBinderProviderConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.springframework.cache.ehcache.EhCacheCache', 'net.sf.ehcache.Ehcache'"
            }
          ],
          "matched": []
        },
        "CacheMeterBinderProvidersConfiguration.HazelcastCacheMeterBinderProviderConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'com.hazelcast.spring.cache.HazelcastCache', 'com.hazelcast.core.Hazelcast'"
            }
          ],
          "matched": []
        },
        "CacheMeterBinderProvidersConfiguration.JCacheCacheMeterBinderProviderConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.springframework.cache.jcache.JCacheCache', 'javax.cache.CacheManager'"
            }
          ],
          "matched": []
        },
        "CacheMeterBinderProvidersConfiguration.RedisCacheMeterBinderProviderConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.cache.RedisCache'"
            }
          ],
          "matched": []
        },
        "CacheMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.cache.CacheManager; SearchStrategy: all) did not find any beans of type org.springframework.cache.CacheManager"
            }
          ],
          "matched": []
        },
        "RepositoryMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.repository.Repository'"
            }
          ],
          "matched": []
        },
        "AppOpticsMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.appoptics.AppOpticsMeterRegistry'"
            }
          ],
          "matched": []
        },
        "AtlasMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.atlas.AtlasMeterRegistry'"
            }
          ],
          "matched": []
        },
        "DatadogMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.datadog.DatadogMeterRegistry'"
            }
          ],
          "matched": []
        },
        "DynatraceMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.dynatrace.DynatraceMeterRegistry'"
            }
          ],
          "matched": []
        },
        "ElasticMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.elastic.ElasticMeterRegistry'"
            }
          ],
          "matched": []
        },
        "GangliaMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.ganglia.GangliaMeterRegistry'"
            }
          ],
          "matched": []
        },
        "GraphiteMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.graphite.GraphiteMeterRegistry'"
            }
          ],
          "matched": []
        },
        "HumioMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.humio.HumioMeterRegistry'"
            }
          ],
          "matched": []
        },
        "InfluxMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.influx.InfluxMeterRegistry'"
            }
          ],
          "matched": []
        },
        "JmxMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.jmx.JmxMeterRegistry'"
            }
          ],
          "matched": []
        },
        "KairosMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.kairos.KairosMeterRegistry'"
            }
          ],
          "matched": []
        },
        "NewRelicMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.newrelic.NewRelicMeterRegistry'"
            }
          ],
          "matched": []
        },
        "PrometheusMetricsExportAutoConfiguration#exemplarSampler": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: io.prometheus.client.exemplars.tracer.common.SpanContextSupplier; SearchStrategy: all) did not find any beans of type io.prometheus.client.exemplars.tracer.common.SpanContextSupplier"
            }
          ],
          "matched": []
        },
        "PrometheusMetricsExportAutoConfiguration.PrometheusPushGatewayConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.prometheus.client.exporter.PushGateway'"
            }
          ],
          "matched": []
        },
        "SignalFxMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.signalfx.SignalFxMeterRegistry'"
            }
          ],
          "matched": []
        },
        "SimpleMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) found beans of type 'io.micrometer.core.instrument.MeterRegistry' prometheusMeterRegistry"
            }
          ],
          "matched": [
            {
              "condition": "OnMetricsExportEnabledCondition",
              "message": "@ConditionalOnEnabledMetricsExport management.metrics.export.defaults.enabled is considered true"
            }
          ]
        },
        "StackdriverMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.stackdriver.StackdriverMeterRegistry'"
            }
          ],
          "matched": []
        },
        "StatsdMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.statsd.StatsdMeterRegistry'"
            }
          ],
          "matched": []
        },
        "WavefrontMetricsExportAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.wavefront.sdk.common.WavefrontSender'"
            }
          ],
          "matched": []
        },
        "GraphQlMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "DataSourcePoolMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: javax.sql.DataSource,io.micrometer.core.instrument.MeterRegistry; SearchStrategy: all) did not find any beans of type javax.sql.DataSource"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required classes 'javax.sql.DataSource', 'io.micrometer.core.instrument.MeterRegistry'"
            }
          ]
        },
        "DataSourcePoolMetricsAutoConfiguration.HikariDataSourceMetricsConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.zaxxer.hikari.HikariDataSource'"
            },
            {
              "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
              "message": "Ancestor org.springframework.boot.actuate.autoconfigure.metrics.jdbc.DataSourcePoolMetricsAutoConfiguration did not match"
            }
          ],
          "matched": []
        },
        "JerseyServerMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.micrometer.core.instrument.binder.jersey.server.MetricsApplicationEventListener'"
            }
          ],
          "matched": []
        },
        "MongoMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.mongodb.MongoClientSettings'"
            }
          ],
          "matched": []
        },
        "HibernateMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.persistence.EntityManagerFactory'"
            }
          ],
          "matched": []
        },
        "ConnectionPoolMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.r2dbc.pool.ConnectionPool'"
            }
          ],
          "matched": []
        },
        "LettuceMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.lettuce.core.metrics.MicrometerCommandLatencyRecorder'"
            }
          ],
          "matched": []
        },
        "WebClientMetricsConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient'"
            }
          ],
          "matched": []
        },
        "JettyMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.eclipse.jetty.server.Server'"
            }
          ],
          "matched": []
        },
        "WebFluxMetricsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication did not find reactive web application classes"
            }
          ],
          "matched": []
        },
        "MongoHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.mongodb.core.MongoTemplate'"
            }
          ],
          "matched": []
        },
        "MongoReactiveHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'reactor.core.publisher.Flux'"
            }
          ],
          "matched": []
        },
        "Neo4jHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "QuartzEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.quartz.Scheduler'"
            }
          ],
          "matched": []
        },
        "ConnectionFactoryHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory'"
            }
          ],
          "matched": []
        },
        "RedisHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory'"
            }
          ],
          "matched": []
        },
        "RedisReactiveHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'reactor.core.publisher.Flux'"
            }
          ],
          "matched": []
        },
        "ReactiveManagementWebSecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity'"
            }
          ],
          "matched": []
        },
        "ManagementWebSecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "DefaultWebSecurityCondition",
              "message": "AllNestedConditions 1 matched 1 did not; NestedCondition on DefaultWebSecurityCondition.Beans @ConditionalOnMissingBean (types: org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter,org.springframework.security.web.SecurityFilterChain; SearchStrategy: all) did not find any beans; NestedCondition on DefaultWebSecurityCondition.Classes @ConditionalOnClass did not find required classes 'org.springframework.security.web.SecurityFilterChain', 'org.springframework.security.config.annotation.web.builders.HttpSecurity'"
            }
          ],
          "matched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ]
        },
        "SecurityRequestMatchersManagementContextConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.web.util.matcher.RequestMatcher'"
            }
          ],
          "matched": []
        },
        "SessionsEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.session.FindByIndexNameSessionRepository'"
            }
          ],
          "matched": []
        },
        "SolrHealthContributorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.SolrClient'"
            }
          ],
          "matched": []
        },
        "StartupEndpointAutoConfiguration": {
          "notMatched": [
            {
              "condition": "StartupEndpointAutoConfiguration.ApplicationStartupCondition",
              "message": "ApplicationStartup configured applicationStartup is of type class org.springframework.core.metrics.DefaultApplicationStartup, expected BufferingApplicationStartup."
            }
          ],
          "matched": []
        },
        "HttpTraceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.trace.http.HttpTraceRepository; SearchStrategy: all) did not find any beans of type org.springframework.boot.actuate.trace.http.HttpTraceRepository"
            }
          ],
          "matched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication (required) found 'session' scope"
            },
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.trace.http.enabled) matched"
            }
          ]
        },
        "HttpTraceAutoConfiguration.ReactiveTraceFilterConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "did not find reactive web application classes"
            },
            {
              "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
              "message": "Ancestor org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration did not match"
            }
          ],
          "matched": []
        },
        "HttpTraceAutoConfiguration.ServletTraceFilterConfiguration": {
          "notMatched": [
            {
              "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
              "message": "Ancestor org.springframework.boot.actuate.autoconfigure.trace.http.HttpTraceAutoConfiguration did not match"
            }
          ],
          "matched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "found 'session' scope"
            }
          ]
        },
        "HttpTraceEndpointAutoConfiguration#httpTraceEndpoint": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.boot.actuate.trace.http.HttpTraceRepository; SearchStrategy: all) did not find any beans of type org.springframework.boot.actuate.trace.http.HttpTraceRepository"
            }
          ],
          "matched": []
        },
        "JerseySameManagementContextConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.ResourceConfig'"
            }
          ],
          "matched": []
        },
        "MappingsEndpointAutoConfiguration.ReactiveWebConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler'"
            }
          ],
          "matched": []
        },
        "ReactiveManagementContextAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'reactor.core.publisher.Flux'"
            }
          ],
          "matched": []
        },
        "ManagementContextAutoConfiguration.DifferentManagementContextConfiguration": {
          "notMatched": [
            {
              "condition": "OnManagementPortCondition",
              "message": "Management Port actual port type (SAME) did not match required type (DIFFERENT)"
            }
          ],
          "matched": []
        },
        "ServletManagementContextAutoConfiguration.ApplicationContextFilterConfiguration": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (management.server.add-application-context-header=true) did not find property 'add-application-context-header'"
            }
          ],
          "matched": []
        },
        "RabbitAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.rabbitmq.client.Channel'"
            }
          ],
          "matched": []
        },
        "AopAutoConfiguration.AspectJAutoProxyingConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.aspectj.weaver.Advice'"
            }
          ],
          "matched": []
        },
        "BatchAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.batch.core.launch.JobLauncher'"
            }
          ],
          "matched": []
        },
        "Cache2kCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.cache2k.Cache2kBuilder'"
            }
          ],
          "matched": []
        },
        "CacheAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.cache.interceptor.CacheAspectSupport; SearchStrategy: all) did not find any beans of type org.springframework.cache.interceptor.CacheAspectSupport"
            }
          ],
          "matched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass found required class 'org.springframework.cache.CacheManager'"
            }
          ]
        },
        "CacheAutoConfiguration.CacheManagerEntityManagerFactoryDependsOnPostProcessor": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean'"
            },
            {
              "condition": "ConditionEvaluationReport.AncestorsMatchedCondition",
              "message": "Ancestor org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration did not match"
            }
          ],
          "matched": []
        },
        "CaffeineCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.github.benmanes.caffeine.cache.Caffeine'"
            }
          ],
          "matched": []
        },
        "CouchbaseCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "EhCacheCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'net.sf.ehcache.Cache'"
            }
          ],
          "matched": []
        },
        "HazelcastCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
            }
          ],
          "matched": []
        },
        "InfinispanCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.infinispan.spring.embedded.provider.SpringEmbeddedCacheManager'"
            }
          ],
          "matched": []
        },
        "JCacheCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.cache.Caching'"
            }
          ],
          "matched": []
        },
        "RedisCacheConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.connection.RedisConnectionFactory'"
            }
          ],
          "matched": []
        },
        "CassandraAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "MessageSourceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "MessageSourceAutoConfiguration.ResourceBundleCondition",
              "message": "ResourceBundle did not find bundle with basename messages"
            }
          ],
          "matched": []
        },
        "CouchbaseAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "PersistenceExceptionTranslationAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor'"
            }
          ],
          "matched": []
        },
        "CassandraDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "CassandraReactiveDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "CassandraReactiveRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.cassandra.ReactiveSession'"
            }
          ],
          "matched": []
        },
        "CassandraRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.datastax.oss.driver.api.core.CqlSession'"
            }
          ],
          "matched": []
        },
        "CouchbaseDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket'"
            }
          ],
          "matched": []
        },
        "CouchbaseReactiveDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "CouchbaseReactiveRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Cluster'"
            }
          ],
          "matched": []
        },
        "CouchbaseRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.couchbase.client.java.Bucket'"
            }
          ],
          "matched": []
        },
        "ElasticsearchDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.core.ElasticsearchRestTemplate'"
            }
          ],
          "matched": []
        },
        "ElasticsearchRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.Client'"
            }
          ],
          "matched": []
        },
        "ReactiveElasticsearchRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.elasticsearch.client.reactive.ReactiveElasticsearchClient'"
            }
          ],
          "matched": []
        },
        "ReactiveElasticsearchRestClientAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'reactor.netty.http.client.HttpClient'"
            }
          ],
          "matched": []
        },
        "JdbcRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.jdbc.repository.config.AbstractJdbcConfiguration'"
            }
          ],
          "matched": []
        },
        "JpaRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.jpa.repository.JpaRepository'"
            }
          ],
          "matched": []
        },
        "LdapRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.ldap.repository.LdapRepository'"
            }
          ],
          "matched": []
        },
        "MongoDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient'"
            }
          ],
          "matched": []
        },
        "MongoReactiveDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient'"
            }
          ],
          "matched": []
        },
        "MongoReactiveRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient'"
            }
          ],
          "matched": []
        },
        "MongoRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient'"
            }
          ],
          "matched": []
        },
        "Neo4jDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "Neo4jReactiveDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "Neo4jReactiveRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "Neo4jRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "R2dbcDataAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.r2dbc.core.R2dbcEntityTemplate'"
            }
          ],
          "matched": []
        },
        "R2dbcRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory'"
            }
          ],
          "matched": []
        },
        "RedisAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.core.RedisOperations'"
            }
          ],
          "matched": []
        },
        "RedisReactiveAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'reactor.core.publisher.Flux'"
            }
          ],
          "matched": []
        },
        "RedisRepositoriesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.redis.repository.configuration.EnableRedisRepositories'"
            }
          ],
          "matched": []
        },
        "RepositoryRestMvcAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.rest.webmvc.config.RepositoryRestMvcConfiguration'"
            }
          ],
          "matched": []
        },
        "SpringDataWebAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.data.web.PageableHandlerMethodArgumentResolver'"
            }
          ],
          "matched": []
        },
        "ElasticsearchRestClientAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.elasticsearch.client.RestClientBuilder'"
            }
          ],
          "matched": []
        },
        "FlywayAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.flywaydb.core.Flyway'"
            }
          ],
          "matched": []
        },
        "FreeMarkerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'freemarker.template.Configuration'"
            }
          ],
          "matched": []
        },
        "GraphQlAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlQueryByExampleAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlQuerydslAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlReactiveQueryByExampleAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlReactiveQuerydslAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlWebFluxAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlRSocketAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "RSocketGraphQlClientAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlWebFluxSecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlWebMvcSecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GraphQlWebMvcAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'graphql.GraphQL'"
            }
          ],
          "matched": []
        },
        "GroovyTemplateAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'groovy.text.markup.MarkupTemplateEngine'"
            }
          ],
          "matched": []
        },
        "GsonAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.google.gson.Gson'"
            }
          ],
          "matched": []
        },
        "H2ConsoleAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.h2.server.web.WebServlet'"
            }
          ],
          "matched": []
        },
        "HypermediaAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.hateoas.EntityModel'"
            }
          ],
          "matched": []
        },
        "HazelcastAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
            }
          ],
          "matched": []
        },
        "HazelcastJpaDependencyAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.hazelcast.core.HazelcastInstance'"
            }
          ],
          "matched": []
        },
        "GsonHttpMessageConvertersConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.google.gson.Gson'"
            }
          ],
          "matched": []
        },
        "JacksonHttpMessageConvertersConfiguration.MappingJackson2XmlHttpMessageConverterConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.fasterxml.jackson.dataformat.xml.XmlMapper'"
            }
          ],
          "matched": []
        },
        "JsonbHttpMessageConvertersConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.json.bind.Jsonb'"
            }
          ],
          "matched": []
        },
        "CodecsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient'"
            }
          ],
          "matched": []
        },
        "InfluxDbAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.influxdb.InfluxDB'"
            }
          ],
          "matched": []
        },
        "IntegrationAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.integration.config.EnableIntegration'"
            }
          ],
          "matched": []
        },
        "DataSourceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'"
            }
          ],
          "matched": []
        },
        "DataSourceTransactionManagerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate'"
            }
          ],
          "matched": []
        },
        "JdbcTemplateAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.core.JdbcTemplate'"
            }
          ],
          "matched": []
        },
        "JndiDataSourceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'"
            }
          ],
          "matched": []
        },
        "XADataSourceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.transaction.TransactionManager'"
            }
          ],
          "matched": []
        },
        "JerseyAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.glassfish.jersey.server.spring.SpringComponentProvider'"
            }
          ],
          "matched": []
        },
        "JmsAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.jms.Message'"
            }
          ],
          "matched": []
        },
        "JndiConnectionFactoryAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jms.core.JmsTemplate'"
            }
          ],
          "matched": []
        },
        "ActiveMQAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory'"
            }
          ],
          "matched": []
        },
        "ArtemisAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.jms.ConnectionFactory'"
            }
          ],
          "matched": []
        },
        "JooqAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.jooq.DSLContext'"
            }
          ],
          "matched": []
        },
        "JsonbAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.json.bind.Jsonb'"
            }
          ],
          "matched": []
        },
        "KafkaAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.kafka.core.KafkaTemplate'"
            }
          ],
          "matched": []
        },
        "LdapAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.ldap.core.ContextSource'"
            }
          ],
          "matched": []
        },
        "EmbeddedLdapAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.unboundid.ldap.listener.InMemoryDirectoryServer'"
            }
          ],
          "matched": []
        },
        "LiquibaseAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'liquibase.change.DatabaseChange'"
            }
          ],
          "matched": []
        },
        "MailSenderAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.activation.MimeType'"
            }
          ],
          "matched": []
        },
        "MailSenderValidatorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnSingleCandidate did not find required type 'org.springframework.mail.javamail.JavaMailSenderImpl'"
            }
          ],
          "matched": []
        },
        "MongoAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.mongodb.client.MongoClient'"
            }
          ],
          "matched": []
        },
        "MongoReactiveAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.mongodb.reactivestreams.client.MongoClient'"
            }
          ],
          "matched": []
        },
        "EmbeddedMongoAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.mongodb.MongoClientSettings'"
            }
          ],
          "matched": []
        },
        "MustacheAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.samskivert.mustache.Mustache'"
            }
          ],
          "matched": []
        },
        "Neo4jAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.neo4j.driver.Driver'"
            }
          ],
          "matched": []
        },
        "NettyAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.netty.util.NettyRuntime'"
            }
          ],
          "matched": []
        },
        "HibernateJpaAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.persistence.EntityManager'"
            }
          ],
          "matched": []
        },
        "QuartzAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.quartz.Scheduler'"
            }
          ],
          "matched": []
        },
        "R2dbcAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.r2dbc.spi.ConnectionFactory'"
            }
          ],
          "matched": []
        },
        "R2dbcTransactionManagerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.r2dbc.connection.R2dbcTransactionManager'"
            }
          ],
          "matched": []
        },
        "RSocketMessagingAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.rsocket.RSocket'"
            }
          ],
          "matched": []
        },
        "RSocketRequesterAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.rsocket.RSocket'"
            }
          ],
          "matched": []
        },
        "RSocketServerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.rsocket.core.RSocketServer'"
            }
          ],
          "matched": []
        },
        "RSocketStrategiesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.netty.buffer.PooledByteBufAllocator'"
            }
          ],
          "matched": []
        },
        "ReactiveOAuth2ClientAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'reactor.core.publisher.Flux'"
            }
          ],
          "matched": []
        },
        "OAuth2ClientAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.configuration.EnableWebSecurity'"
            }
          ],
          "matched": []
        },
        "ReactiveOAuth2ResourceServerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity'"
            }
          ],
          "matched": []
        },
        "OAuth2ResourceServerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken'"
            }
          ],
          "matched": []
        },
        "ReactiveSecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'reactor.core.publisher.Flux'"
            }
          ],
          "matched": []
        },
        "ReactiveUserDetailsServiceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.ReactiveAuthenticationManager'"
            }
          ],
          "matched": []
        },
        "RSocketSecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.rsocket.core.SecuritySocketAcceptorInterceptor'"
            }
          ],
          "matched": []
        },
        "Saml2RelyingPartyAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository'"
            }
          ],
          "matched": []
        },
        "SecurityAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.DefaultAuthenticationEventPublisher'"
            }
          ],
          "matched": []
        },
        "SecurityFilterAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.config.http.SessionCreationPolicy'"
            }
          ],
          "matched": []
        },
        "UserDetailsServiceAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.security.authentication.AuthenticationManager'"
            }
          ],
          "matched": []
        },
        "SendGridAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'com.sendgrid.SendGrid'"
            }
          ],
          "matched": []
        },
        "SessionAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.session.Session'"
            }
          ],
          "matched": []
        },
        "SolrAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.apache.solr.client.solrj.impl.CloudSolrClient'"
            }
          ],
          "matched": []
        },
        "DataSourceInitializationConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.jdbc.datasource.init.DatabasePopulator'"
            }
          ],
          "matched": []
        },
        "R2dbcInitializationConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'io.r2dbc.spi.ConnectionFactory', 'org.springframework.r2dbc.connection.init.DatabasePopulator'"
            }
          ],
          "matched": []
        },
        "TaskSchedulingAutoConfiguration#taskScheduler": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (names: org.springframework.context.annotation.internalScheduledAnnotationProcessor; SearchStrategy: all) did not find any beans named org.springframework.context.annotation.internalScheduledAnnotationProcessor"
            }
          ],
          "matched": []
        },
        "ThymeleafAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.thymeleaf.spring5.SpringTemplateEngine'"
            }
          ],
          "matched": []
        },
        "TransactionAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.transaction.PlatformTransactionManager'"
            }
          ],
          "matched": []
        },
        "JtaAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.transaction.Transaction'"
            }
          ],
          "matched": []
        },
        "ValidationAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'javax.validation.executable.ExecutableValidator'"
            }
          ],
          "matched": []
        },
        "EmbeddedWebServerFactoryCustomizerAutoConfiguration.JettyWebServerFactoryCustomizerConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext'"
            }
          ],
          "matched": []
        },
        "EmbeddedWebServerFactoryCustomizerAutoConfiguration.NettyWebServerFactoryCustomizerConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'reactor.netty.http.server.HttpServer'"
            }
          ],
          "matched": []
        },
        "EmbeddedWebServerFactoryCustomizerAutoConfiguration.UndertowWebServerFactoryCustomizerConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode'"
            }
          ],
          "matched": []
        },
        "HttpHandlerAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.DispatcherHandler'"
            }
          ],
          "matched": []
        },
        "ReactiveMultipartAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer'"
            }
          ],
          "matched": []
        },
        "ReactiveWebServerFactoryAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication did not find reactive web application classes"
            }
          ],
          "matched": []
        },
        "WebFluxAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer'"
            }
          ],
          "matched": []
        },
        "WebSessionIdResolverAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'reactor.core.publisher.Mono'"
            }
          ],
          "matched": []
        },
        "ErrorWebFluxAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.config.WebFluxConfigurer'"
            }
          ],
          "matched": []
        },
        "ClientHttpConnectorAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient'"
            }
          ],
          "matched": []
        },
        "WebClientAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.reactive.function.client.WebClient'"
            }
          ],
          "matched": []
        },
        "DispatcherServletAutoConfiguration.DispatcherServletConfiguration#multipartResolver": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnBean (types: org.springframework.web.multipart.MultipartResolver; SearchStrategy: all) did not find any beans of type org.springframework.web.multipart.MultipartResolver"
            }
          ],
          "matched": []
        },
        "ServletWebServerFactoryAutoConfiguration.ForwardedHeaderFilterConfiguration": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (server.forward-headers-strategy=framework) did not find property 'server.forward-headers-strategy'"
            }
          ],
          "matched": []
        },
        "ServletWebServerFactoryConfiguration.EmbeddedJetty": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.eclipse.jetty.server.Server', 'org.eclipse.jetty.util.Loader', 'org.eclipse.jetty.webapp.WebAppContext'"
            }
          ],
          "matched": []
        },
        "ServletWebServerFactoryConfiguration.EmbeddedUndertow": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'io.undertow.Undertow', 'org.xnio.SslClientAuthMode'"
            }
          ],
          "matched": []
        },
        "WebMvcAutoConfiguration#hiddenHttpMethodFilter": {
          "notMatched": [
            {
              "condition": "OnPropertyCondition",
              "message": "@ConditionalOnProperty (spring.mvc.hiddenmethod.filter.enabled) did not find property 'enabled'"
            }
          ],
          "matched": []
        },
        "WebMvcAutoConfiguration.ResourceChainCustomizerConfiguration": {
          "notMatched": [
            {
              "condition": "OnEnabledResourceChainCondition",
              "message": "@ConditionalOnEnabledResourceChain did not find class org.webjars.WebJarAssetLocator"
            }
          ],
          "matched": []
        },
        "WebMvcAutoConfiguration.WebMvcAutoConfigurationAdapter#beanNameViewResolver": {
          "notMatched": [
            {
              "condition": "OnBeanCondition",
              "message": "@ConditionalOnMissingBean (types: org.springframework.web.servlet.view.BeanNameViewResolver; SearchStrategy: all) found beans of type 'org.springframework.web.servlet.view.BeanNameViewResolver' beanNameViewResolver"
            }
          ],
          "matched": []
        },
        "WebServicesAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.ws.transport.http.MessageDispatcherServlet'"
            }
          ],
          "matched": []
        },
        "WebServiceTemplateAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.oxm.Marshaller'"
            }
          ],
          "matched": []
        },
        "WebSocketReactiveAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnWebApplicationCondition",
              "message": "@ConditionalOnWebApplication did not find reactive web application classes"
            }
          ],
          "matched": []
        },
        "WebSocketMessagingAutoConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer'"
            }
          ],
          "matched": []
        },
        "WebSocketServletAutoConfiguration.Jetty10WebSocketConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required classes 'org.eclipse.jetty.websocket.javax.server.internal.JavaxWebSocketServerContainer', 'org.eclipse.jetty.websocket.server.JettyWebSocketServerContainer'"
            }
          ],
          "matched": []
        },
        "WebSocketServletAutoConfiguration.JettyWebSocketConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'org.eclipse.jetty.websocket.jsr356.server.deploy.WebSocketServerContainerInitializer'"
            }
          ],
          "matched": []
        },
        "WebSocketServletAutoConfiguration.UndertowWebSocketConfiguration": {
          "notMatched": [
            {
              "condition": "OnClassCondition",
              "message": "@ConditionalOnClass did not find required class 'io.undertow.websockets.jsr.Bootstrap'"
            }
          ],
          "matched": []
        }
      },
      "unconditionalClasses": [
        "org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.availability.AvailabilityHealthContributorAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.info.InfoContributorAutoConfiguration",
        "org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration",
        "org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.metrics.integration.IntegrationMetricsAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration",
        "org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration",
        "org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration",
        "org.springframework.boot.actuate.autoconfigure.web.server.ManagementContextAutoConfiguration"
      ]
    }
  }
}
